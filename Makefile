#!/bin/bash

PACKAGE_DIR=dataset_factory/
TEST_DIR=tests/
PATH_LINT_SCORE=.github/pylint.txt
PATH_LINT_BADGE=.github/pylint.svg
PATH_COV_BADGE=.github/coverage.svg

run:
	@clear
	@poetry run python main.py

vision:
	@poetry run python BlocVision/vision.py

robot:
	@poetry run python BlocRobot/InitPos.py

help:  ## Show help
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

install:
	@python -m pip install --upgrade pip
	@poetry install

clean: ## Clean autogenerated files
	rm -rf dist
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage
	rm -f database.db

clean-logs: ## Clean logs
	rm -rf logs/**

clean-env: ## Clean poetry local files
	rm -rf .cache
	rm -rf .venv

format: ## Run pre-commit hooks
	@poetry run black BlocVision
	@poetry run isort --profile black BlocVision
	@poetry run black BlocRobot
	@poetry run isort --profile black BlocRobot
	@poetry run black BlocAlgo
	@poetry run isort --profile black BlocAlgo
	@poetry run black BlocInterface
	@poetry run isort --profile black BlocInterface
	@poetry run black main.py
	@poetry run isort --profile black main.py
	@poetry run black Tests
	@poetry run isort --profile black Tests
##@poetry run pre-commit run -a

sync: ## Merge changes from main branch to your current branch
	git pull
	git pull origin main

test: ## Run not slow tests
	@poetry run pytest -k "not slow"  \
	$(TEST_DIR) --cov=$(PACKAGE_DIR) --cov-report html:./htmlcov \
	--cov-fail-under 90
	@poetry run coverage-badge -fo $(PATH_COV_BADGE)

test-full: ## Run all tests
	@poetry run pytest  \
	$(TEST_DIR) --cov=$(PACKAGE_DIR) --cov-report html:./htmlcov \
	--cov-fail-under 90
	@poetry run coverage-badge -fo $(PATH_COV_BADGE)

build:
	@poetry build

# Ref on automatic generation of linter badge: https://stackoverflow.com/questions/43126475/pylint-badge-in-gitlab
lint:
	@poetry run pylint --fail-under 9.0 $(PACKAGE_DIR) | tee $(PATH_LINT_SCORE)
	@score=$$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' $(PATH_LINT_SCORE)); \
	poetry run anybadge --value=$$score --file=$(PATH_LINT_BADGE) --label=pylint -o
	@poetry run pylint --fail-under 9.0 -d C0116,W0621,W0212,W0611,R0801 $(TEST_DIR)

# requirements.txt is only used for GitHub vulnerability alert.
# GitHub does not support poetry yet, so this file is needed.
# <https://docs.github.com/en/free-pro-team@latest/github/visualizing-repository-data-with-graphs/about-the-dependency-graph#supported-package-ecosystems>
requirements:
	@poetry export --without-hashes -f requirements.txt -o requirements.txt

check_types:
	@poetry run mypy -p $$(echo $(PACKAGE_DIR) | sed 's/^\///;s/\// /g')
	@poetry run mypy -p $$(echo $(TEST_DIR) | sed 's/^\///;s/\// /g')
